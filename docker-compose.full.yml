version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=srpk_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=srpk_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U srpk_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Payment API
  payment-api:
    build:
      context: .
      dockerfile: Dockerfile.payment-api
    environment:
      - FLASK_ENV=${APP_ENV:-production}
      - DATABASE_URL=postgresql://srpk_user:${DB_PASSWORD}@postgres:5432/srpk_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${PAYPAL_CLIENT_SECRET}
      - PAYPAL_MODE=${PAYPAL_MODE}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - FROM_EMAIL=${FROM_EMAIL}
      - APP_URL=${APP_URL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "5000:5000"
    volumes:
      - ./logs/payment:/app/logs
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Download API
  download-api:
    build:
      context: .
      dockerfile: Dockerfile.download-api
    environment:
      - FLASK_ENV=${APP_ENV:-production}
      - DATABASE_URL=postgresql://srpk_user:${DB_PASSWORD}@postgres:5432/srpk_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - AWS_S3_REGION=${AWS_S3_REGION}
      - DOWNLOAD_TOKEN_EXPIRY_HOURS=${DOWNLOAD_TOKEN_EXPIRY_HOURS}
      - MAX_DOWNLOAD_ATTEMPTS=${MAX_DOWNLOAD_ATTEMPTS}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "5001:5001"
    volumes:
      - ./logs/download:/app/logs
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Main SRPK Application
  srpk-app:
    build:
      context: .
      dockerfile: Dockerfile.srpk-app
    environment:
      - DATABASE_URL=postgresql://srpk_user:${DB_PASSWORD}@postgres:5432/srpk_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - LICENSE_API_URL=http://payment-api:5000
      - DOWNLOAD_API_URL=http://download-api:5001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      payment-api:
        condition: service_started
    ports:
      - "8000:8000"
    volumes:
      - ./logs/app:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Landing Page & Nginx
  nginx:
    build:
      context: .
      dockerfile: Dockerfile.landing
    environment:
      - NGINX_HOST=${APP_URL}
      - NGINX_PORT=80
    depends_on:
      - payment-api
      - download-api
      - srpk-app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ssl/cert.pem:/etc/nginx/ssl/cert.pem:ro
      - ./ssl/key.pem:/etc/nginx/ssl/key.pem:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Background Tasks Worker (Optional)
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.payment-api
    command: celery -A payment_api worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://srpk_user:${DB_PASSWORD}@postgres:5432/srpk_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs/celery:/app/logs
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Monitoring - Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped

  # Monitoring - Grafana (Optional)
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: srpk_network
    driver: bridge